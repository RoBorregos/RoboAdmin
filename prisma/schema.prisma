generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  SponsorHistory SponsorHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SponsorPack {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  order     Int        @default(100)
  benefits  Benefits[]
}

model Benefits {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  esDescription String
  enDescription String
  sponsorId     String
  order         Int         @default(100)
  SponsorPack   SponsorPack @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
}

model Sponsor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  img_path  String
  url       String
  order     Int      @default(100)
}

model Telemetry {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  name      String
  value     String
}

model SponsorHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  json      String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Projects {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  typeProject String
  title       String
  description String?
  wiki        String?
  image       String?
  color       String?
  background  String?
  priority    String
}

model Member {
  id          Int      @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String
  lastname    String
  role        String?
  subtitle    String?
  class       String?
  semesters   String
  status      String
  description String
  github      String?
  github_user String?
  linkedin    String?
  tags        String?
  image       String
}
